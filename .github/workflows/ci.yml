name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run linting
      run: |
        cd backend
        pip install ruff black
        ruff check src/
        black --check src/
    
    - name: Run type checking
      run: |
        cd backend
        pip install mypy
        mypy src/ || true  # Allow to continue for now
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: |
        cd backend
        pytest --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20, 22]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint || true  # Allow to continue for now
    
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check || npx tsc --noEmit
    
    - name: Run tests
      run: |
        cd frontend
        npm run test:ci || true  # Allow to continue for now
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write  # Required for uploading SARIF files
      actions: read
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Container Vulnerability Scanning
  container-security:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    permissions:
      security-events: write  # Required for uploading SARIF files
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build backend image for scanning
      run: |
        docker build -t local/genai-backend:scan ./backend
    
    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'local/genai-backend:scan'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
    
    - name: Build frontend image for scanning
      run: |
        docker build -t local/genai-frontend:scan ./frontend
    
    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'local/genai-frontend:scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: '*.sarif'

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, container-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for semantic versioning
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: thingxcloud
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Generate semantic version
      id: semver
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Remove 'v' prefix and increment patch version
        VERSION=$(echo $LATEST_TAG | sed 's/^v//')
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "short_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          thingxcloud/genai-chatbot-backend:latest
          thingxcloud/genai-chatbot-backend:${{ steps.semver.outputs.version }}
          thingxcloud/genai-chatbot-backend:${{ steps.semver.outputs.short_sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          org.opencontainers.image.title=GenAI Chatbot Backend
          org.opencontainers.image.description=FastAPI backend for GenAI Chatbot
          org.opencontainers.image.version=${{ steps.semver.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          thingxcloud/genai-chatbot-frontend:latest
          thingxcloud/genai-chatbot-frontend:${{ steps.semver.outputs.version }}
          thingxcloud/genai-chatbot-frontend:${{ steps.semver.outputs.short_sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          org.opencontainers.image.title=GenAI Chatbot Frontend
          org.opencontainers.image.description=React frontend for GenAI Chatbot
          org.opencontainers.image.version=${{ steps.semver.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.semver.outputs.tag }}
        release_name: Release ${{ steps.semver.outputs.tag }}
        body: |
          ## What's Changed
          
          ### Docker Images
          - Backend: `thingxcloud/genai-chatbot-backend:${{ steps.semver.outputs.version }}`
          - Frontend: `thingxcloud/genai-chatbot-frontend:${{ steps.semver.outputs.version }}`
          
          ### Deployment
          ```bash
          # Update your deployment with new version
          export IMAGE_TAG=${{ steps.semver.outputs.version }}
          docker-compose -f docker-compose.prod.yml up -d
          
          # Or for Kubernetes
          kubectl set image deployment/backend backend=thingxcloud/genai-chatbot-backend:${{ steps.semver.outputs.version }} -n genai-chatbot
          kubectl set image deployment/frontend frontend=thingxcloud/genai-chatbot-frontend:${{ steps.semver.outputs.version }} -n genai-chatbot
          ```
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}
        draft: false
        prerelease: false
    
    outputs:
      version: ${{ steps.semver.outputs.version }}
      tag: ${{ steps.semver.outputs.tag }}
