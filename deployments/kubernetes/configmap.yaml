apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: genai-chatbot
data:
  ENVIRONMENT: "production"
  CORS_ORIGINS: "https://your-domain.com,https://www.your-domain.com"
  LOG_LEVEL: "INFO"
  WORKERS: "4"
  DATABASE_POOL_SIZE: "20"
  DATABASE_MAX_OVERFLOW: "10"
  REDIS_MAX_CONNECTIONS: "10"
  SESSION_TIMEOUT: "3600"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "60"
  FILE_UPLOAD_MAX_SIZE: "20971520"  # 20MB
  VECTOR_STORE_DIMENSION: "1536"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: genai-chatbot
data:
  REACT_APP_API_URL: "https://api.your-domain.com"
  REACT_APP_WS_URL: "wss://api.your-domain.com"
  REACT_APP_APP_NAME: "GenAI Chatbot"
  REACT_APP_VERSION: "1.0.0"
  REACT_APP_ENVIRONMENT: "production"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: genai-chatbot
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 20M;

        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/javascript
            application/xml+rss
            application/json;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;

        upstream backend {
            server backend-service:8000;
            keepalive 32;
        }

        upstream frontend {
            server frontend-service:8080;
            keepalive 16;
        }

        server {
            listen 80;
            server_name _;
            return 301 https://$host$request_uri;
        }

        server {
            listen 443 ssl http2;
            server_name your-domain.com www.your-domain.com;

            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
            ssl_prefer_server_ciphers off;

            # Security headers for HTTPS
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

            # Frontend
            location / {
                limit_req zone=general burst=50 nodelay;
                proxy_pass http://frontend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Backend API
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Connection "";
                proxy_http_version 1.1;
            }

            # WebSocket support
            location /ws/ {
                proxy_pass http://backend/ws/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
            }

            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }
